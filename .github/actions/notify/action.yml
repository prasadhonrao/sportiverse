name: 'CI/CD Notifications'
description: 'Send notifications about CI/CD pipeline status to various channels (Slack, Teams, Email)'
author: 'Sportiverse Team'

inputs:
  status:
    description: 'Pipeline status (success, failure, warning, info)'
    required: true
  title:
    description: 'Notification title'
    required: true
  message:
    description: 'Notification message'
    required: true
  workflow-name:
    description: 'Name of the workflow'
    required: false
    default: ${{ github.workflow }}
  environment:
    description: 'Target environment'
    required: false
  component:
    description: 'Component being deployed'
    required: false
  deployment-url:
    description: 'URL of the deployed application'
    required: false
  slack-webhook:
    description: 'Slack webhook URL'
    required: false
  teams-webhook:
    description: 'Microsoft Teams webhook URL'
    required: false
  email-to:
    description: 'Email recipient addresses (comma-separated)'
    required: false
  include-details:
    description: 'Include detailed information in notification'
    required: false
    default: 'true'

outputs:
  notification-sent:
    description: 'Whether notification was sent successfully'
    value: ${{ steps.send-notifications.outputs.sent }}
  channels-notified:
    description: 'List of channels that received notifications'
    value: ${{ steps.send-notifications.outputs.channels }}

runs:
  using: 'composite'
  steps:
    - name: Prepare Notification Data
      id: prepare
      shell: bash
      run: |
        # Determine color and emoji based on status
        case "${{ inputs.status }}" in
          "success")
            COLOR="#36a64f"
            EMOJI="‚úÖ"
            ;;
          "failure")
            COLOR="#ff0000"
            EMOJI="‚ùå"
            ;;
          "warning")
            COLOR="#ff9500"
            EMOJI="‚ö†Ô∏è"
            ;;
          "info")
            COLOR="#0099cc"
            EMOJI="‚ÑπÔ∏è"
            ;;
          *)
            COLOR="#808080"
            EMOJI="üîµ"
            ;;
        esac
        
        echo "color=${COLOR}" >> $GITHUB_OUTPUT
        echo "emoji=${EMOJI}" >> $GITHUB_OUTPUT
        
        # Prepare detailed information
        DETAILS=""
        if [ "${{ inputs.include-details }}" = "true" ]; then
          DETAILS="Repository: ${{ github.repository }}\n"
          DETAILS="${DETAILS}Branch: ${{ github.ref_name }}\n"
          DETAILS="${DETAILS}Commit: ${{ github.sha }}\n"
          DETAILS="${DETAILS}Actor: ${{ github.actor }}\n"
          DETAILS="${DETAILS}Workflow: ${{ inputs.workflow-name }}\n"
          
          if [ -n "${{ inputs.environment }}" ]; then
            DETAILS="${DETAILS}Environment: ${{ inputs.environment }}\n"
          fi
          
          if [ -n "${{ inputs.component }}" ]; then
            DETAILS="${DETAILS}Component: ${{ inputs.component }}\n"
          fi
          
          if [ -n "${{ inputs.deployment-url }}" ]; then
            DETAILS="${DETAILS}Deployment URL: ${{ inputs.deployment-url }}\n"
          fi
        fi
        
        # Use base64 to handle multiline content safely
        echo "details=$(echo -n "$DETAILS" | base64 -w 0)" >> $GITHUB_OUTPUT

    - name: Send Slack Notification
      if: inputs.slack-webhook != ''
      shell: bash
      run: |
        echo "üì± Sending Slack notification..."
        
        DETAILS_DECODED=$(echo "${{ steps.prepare.outputs.details }}" | base64 -d)
        
        SLACK_PAYLOAD=$(cat <<EOF
        {
          "attachments": [
            {
              "color": "${{ steps.prepare.outputs.color }}",
              "title": "${{ steps.prepare.outputs.emoji }} ${{ inputs.title }}",
              "text": "${{ inputs.message }}",
              "fields": [
                {
                  "title": "Details",
                  "value": "${DETAILS_DECODED}",
                  "short": false
                }
              ],
              "footer": "Sportiverse CI/CD",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )
        
        curl -X POST -H 'Content-type: application/json' \
          --data "$SLACK_PAYLOAD" \
          "${{ inputs.slack-webhook }}"
        
        echo "‚úÖ Slack notification sent"

    - name: Send Teams Notification
      if: inputs.teams-webhook != ''
      shell: bash
      run: |
        echo "üì¢ Sending Teams notification..."
        
        DETAILS_DECODED=$(echo "${{ steps.prepare.outputs.details }}" | base64 -d)
        
        TEAMS_PAYLOAD=$(cat <<EOF
        {
          "@type": "MessageCard",
          "@context": "http://schema.org/extensions",
          "themeColor": "${{ steps.prepare.outputs.color }}",
          "summary": "${{ inputs.title }}",
          "sections": [
            {
              "activityTitle": "${{ steps.prepare.outputs.emoji }} ${{ inputs.title }}",
              "activitySubtitle": "${{ inputs.message }}",
              "facts": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}"
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}"
                },
                {
                  "name": "Actor",
                  "value": "${{ github.actor }}"
                }
              ]
            }
          ]
        }
        EOF
        )
        
        curl -X POST -H 'Content-Type: application/json' \
          --data "$TEAMS_PAYLOAD" \
          "${{ inputs.teams-webhook }}"
        
        echo "‚úÖ Teams notification sent"

    - name: Send Email Notification
      if: inputs.email-to != ''
      shell: bash
      run: |
        echo "üìß Email notification would be sent to: ${{ inputs.email-to }}"
        echo "Note: Email implementation requires SMTP configuration"
        echo "Consider using a service like SendGrid, Mailgun, or AWS SES"

    - name: Summary
      id: send-notifications
      shell: bash
      run: |
        CHANNELS=""
        SENT=false
        
        if [ -n "${{ inputs.slack-webhook }}" ]; then
          CHANNELS="${CHANNELS}slack,"
          SENT=true
        fi
        
        if [ -n "${{ inputs.teams-webhook }}" ]; then
          CHANNELS="${CHANNELS}teams,"
          SENT=true
        fi
        
        if [ -n "${{ inputs.email-to }}" ]; then
          CHANNELS="${CHANNELS}email,"
          SENT=true
        fi
        
        # Remove trailing comma
        CHANNELS=${CHANNELS%,}
        
        echo "sent=$SENT" >> $GITHUB_OUTPUT
        echo "channels=$CHANNELS" >> $GITHUB_OUTPUT
        
        if [ "$SENT" = true ]; then
          echo "‚úÖ Notifications sent to: $CHANNELS"
        else
          echo "‚ÑπÔ∏è No notification channels configured"
        fi

branding:
  icon: 'bell'
  color: 'yellow'
