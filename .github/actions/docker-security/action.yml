name: 'Docker Security Scan'
description: 'Comprehensive Docker image vulnerability scanning using Trivy and security best practices validation'
author: 'Sportiverse Team'

inputs:
  image-ref:
    description: 'Docker image reference (name:tag or path to Dockerfile)'
    required: true
  scan-type:
    description: 'Type of scan (image, filesystem, repo)'
    required: false
    default: 'image'
  severity:
    description: 'Minimum severity level (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)'
    required: false
    default: 'MEDIUM,HIGH,CRITICAL'
  format:
    description: 'Output format (table, json, sarif)'
    required: false
    default: 'table'
  fail-on-severity:
    description: 'Fail if vulnerabilities are found at or above this level'
    required: false
    default: 'HIGH'
  upload-results:
    description: 'Upload scan results as artifacts'
    required: false
    default: 'true'
  dockerfile-path:
    description: 'Path to Dockerfile for best practices scan'
    required: false

outputs:
  scan-status:
    description: 'Scan completion status (success/failure)'
    value: ${{ steps.trivy-scan.outputs.status }}
  vulnerabilities-found:
    description: 'Number of vulnerabilities found'
    value: ${{ steps.parse-results.outputs.vulns }}
  critical-count:
    description: 'Number of critical vulnerabilities'
    value: ${{ steps.parse-results.outputs.critical }}
  high-count:
    description: 'Number of high severity vulnerabilities'
    value: ${{ steps.parse-results.outputs.high }}
  security-score:
    description: 'Docker security score (0-100)'
    value: ${{ steps.security-score.outputs.score }}

runs:
  using: 'composite'
  steps:
    - name: Install Trivy
      shell: bash
      run: |
        echo "üì¶ Installing Trivy security scanner..."
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y
        trivy --version

    - name: Cache Trivy DB
      uses: actions/cache@v4
      with:
        path: ~/.cache/trivy
        key: ${{ runner.os }}-trivy-db-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-trivy-db-

    - name: Run Trivy Vulnerability Scan
      id: trivy-scan
      shell: bash
      run: |
        echo "üîç Running Trivy vulnerability scan..."
        echo "Target: ${{ inputs.image-ref }}"
        echo "Scan Type: ${{ inputs.scan-type }}"
        echo "Severity Filter: ${{ inputs.severity }}"

        # Create output directory
        mkdir -p trivy-results

        # Run Trivy scan
        if trivy ${{ inputs.scan-type }} \
          --severity "${{ inputs.severity }}" \
          --format json \
          --output trivy-results/results.json \
          "${{ inputs.image-ref }}"; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "‚úÖ Trivy scan completed successfully"
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "‚ùå Trivy scan failed or found critical issues"
        fi

        # Also generate table format for human readability
        trivy ${{ inputs.scan-type }} \
          --severity "${{ inputs.severity }}" \
          --format table \
          --output trivy-results/results.txt \
          "${{ inputs.image-ref }}" || true

        # Generate SARIF format for GitHub Security tab
        trivy ${{ inputs.scan-type }} \
          --severity "${{ inputs.severity }}" \
          --format sarif \
          --output trivy-results/results.sarif \
          "${{ inputs.image-ref }}" || true

    - name: Parse Scan Results
      id: parse-results
      shell: bash
      run: |
        echo "üìä Parsing vulnerability scan results..."

        TOTAL_VULNS=0
        CRITICAL_COUNT=0
        HIGH_COUNT=0
        MEDIUM_COUNT=0
        LOW_COUNT=0

        if [ -f "trivy-results/results.json" ]; then
          # Parse JSON results using jq
          if command -v jq >/dev/null 2>&1; then
            CRITICAL_COUNT=$(cat trivy-results/results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' 2>/dev/null || echo "0")
            HIGH_COUNT=$(cat trivy-results/results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' 2>/dev/null || echo "0")
            MEDIUM_COUNT=$(cat trivy-results/results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' 2>/dev/null || echo "0")
            LOW_COUNT=$(cat trivy-results/results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' 2>/dev/null || echo "0")
            TOTAL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
          else
            echo "‚ö†Ô∏è jq not available, using basic parsing"
            TOTAL_VULNS=$(grep -c '"Severity"' trivy-results/results.json 2>/dev/null || echo "0")
          fi
        fi

        echo "vulns=$TOTAL_VULNS" >> $GITHUB_OUTPUT
        echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
        echo "medium=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        echo "low=$LOW_COUNT" >> $GITHUB_OUTPUT

        echo "üîç Vulnerability Summary:"
        echo "  Critical: $CRITICAL_COUNT"
        echo "  High: $HIGH_COUNT"
        echo "  Medium: $MEDIUM_COUNT"
        echo "  Low: $LOW_COUNT"
        echo "  Total: $TOTAL_VULNS"

    - name: Dockerfile Security Best Practices
      if: inputs.dockerfile-path != ''
      shell: bash
      run: |
        echo "üê≥ Analyzing Dockerfile security best practices..."

        DOCKERFILE="${{ inputs.dockerfile-path }}"
        if [ ! -f "$DOCKERFILE" ]; then
          echo "‚ö†Ô∏è Dockerfile not found at: $DOCKERFILE"
          exit 0
        fi

        echo "üìã Dockerfile Security Checklist:"

        # Check for non-root user
        if grep -q "USER " "$DOCKERFILE"; then
          echo "‚úÖ Non-root user specified"
        else
          echo "‚ùå No non-root user specified (security risk)"
        fi

        # Check for latest tag usage
        if grep -q ":latest" "$DOCKERFILE"; then
          echo "‚ùå Using 'latest' tag (not reproducible)"
        else
          echo "‚úÖ Specific version tags used"
        fi

        # Check for COPY vs ADD
        if grep -q "ADD " "$DOCKERFILE"; then
          echo "‚ö†Ô∏è ADD instruction found (consider using COPY instead)"
        fi

        # Check for secrets in build
        if grep -E "(password|secret|key|token)" "$DOCKERFILE" -i; then
          echo "‚ö†Ô∏è Potential secrets detected in Dockerfile"
        fi

        # Run Trivy config scan on Dockerfile
        trivy config "$DOCKERFILE" --format table > trivy-results/dockerfile-scan.txt 2>&1 || true

    - name: Calculate Security Score
      id: security-score
      shell: bash
      run: |
        CRITICAL="${{ steps.parse-results.outputs.critical }}"
        HIGH="${{ steps.parse-results.outputs.high }}"
        MEDIUM="${{ steps.parse-results.outputs.medium }}"

        # Start with perfect score
        SCORE=100

        # Deduct points based on vulnerabilities
        SCORE=$((SCORE - CRITICAL * 20))  # Critical: -20 points each
        SCORE=$((SCORE - HIGH * 10))      # High: -10 points each
        SCORE=$((SCORE - MEDIUM * 5))     # Medium: -5 points each

        # Ensure score doesn't go below 0
        if [ $SCORE -lt 0 ]; then
          SCORE=0
        fi

        echo "score=$SCORE" >> $GITHUB_OUTPUT

        echo "üõ°Ô∏è Docker Security Score: $SCORE/100"

        if [ $SCORE -ge 90 ]; then
          echo "üèÜ Excellent Docker security!"
        elif [ $SCORE -ge 70 ]; then
          echo "‚úÖ Good Docker security practices"
        elif [ $SCORE -ge 50 ]; then
          echo "‚ö†Ô∏è Docker security improvements needed"
        else
          echo "‚ùå Critical Docker security issues found"
        fi

    - name: Upload Scan Results
      if: inputs.upload-results == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: docker-security-scan-results
        path: trivy-results/
        retention-days: 30

    - name: Upload SARIF Results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results/results.sarif
      continue-on-error: true

    - name: Check Security Threshold
      shell: bash
      run: |
        CRITICAL="${{ steps.parse-results.outputs.critical }}"
        HIGH="${{ steps.parse-results.outputs.high }}"
        FAIL_LEVEL="${{ inputs.fail-on-severity }}"

        echo "üîç Checking security threshold..."
        echo "Fail Level: $FAIL_LEVEL"
        echo "Critical Issues: $CRITICAL"
        echo "High Issues: $HIGH"

        SHOULD_FAIL=false

        case "$FAIL_LEVEL" in
          "CRITICAL")
            if [ $CRITICAL -gt 0 ]; then
              SHOULD_FAIL=true
            fi
            ;;
          "HIGH")
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              SHOULD_FAIL=true
            fi
            ;;
        esac

        if [ "$SHOULD_FAIL" = "true" ]; then
          echo "‚ùå Security threshold exceeded - failing build"
          echo "Critical vulnerabilities found that exceed the configured threshold"
          exit 1
        else
          echo "‚úÖ Security threshold check passed"
        fi

branding:
  icon: 'shield'
  color: 'red'
