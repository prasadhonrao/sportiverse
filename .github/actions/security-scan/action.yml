name: 'Security Analysis'
description: 'Comprehensive security scanning with CodeQL, dependency vulnerabilities, and SAST analysis'
author: 'Sportiverse Team'

inputs:
  working-directory:
    description: 'Working directory for the project'
    required: true
  language:
    description: 'Programming language for CodeQL analysis'
    required: false
    default: 'javascript'
  codeql-queries:
    description: 'CodeQL query suite to run'
    required: false
    default: '+security-and-quality'
  fail-on-error:
    description: 'Fail the action if security issues are found'
    required: false
    default: 'false'
  dependency-check:
    description: 'Run dependency vulnerability check'
    required: false
    default: 'true'
  upload-sarif:
    description: 'Upload SARIF results to GitHub Security tab'
    required: false
    default: 'true'
  audit-level:
    description: 'npm audit severity level (moderate, high, critical)'
    required: false
    default: 'moderate'
  ignore-dev-vulns:
    description: 'Ignore vulnerabilities in development dependencies'
    required: false
    default: 'false'

outputs:
  codeql-status:
    description: 'CodeQL analysis status (success/failure)'
    value: ${{ steps.codeql-analysis.outputs.status }}
  dependency-status:
    description: 'Dependency check status (success/failure)'
    value: ${{ steps.dependency-check.outputs.status }}
  issues-found:
    description: 'Number of security issues found'
    value: ${{ steps.summary.outputs.issues }}
  security-score:
    description: 'Overall security score (0-100)'
    value: ${{ steps.summary.outputs.score }}

runs:
  using: 'composite'
  steps:
    - name: Initialize CodeQL
      id: init-codeql
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ inputs.language }}
        queries: ${{ inputs.codeql-queries }}
        config: |
          name: "Sportiverse Security Analysis"

          query-filters:
            - exclude:
                id: js/unused-local-variable
            - include:
                kind: problem
                severity: error

    - name: Setup Node.js for Dependencies
      if: inputs.dependency-check == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json

    - name: Install Dependencies for Analysis
      if: inputs.dependency-check == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üì¶ Installing dependencies for security analysis..."
        npm ci

    - name: Run Dependency Security Audit
      id: dependency-check
      if: inputs.dependency-check == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîç Running dependency vulnerability scan..."

        AUDIT_LEVEL="${{ inputs.audit-level }}"
        IGNORE_DEV="${{ inputs.ignore-dev-vulns }}"

        # First, run audit with production only to check runtime dependencies
        echo "üì¶ Checking production dependencies..."
        PROD_AUDIT_STATUS=0
        npm audit --omit=dev --audit-level=$AUDIT_LEVEL --json > prod-audit-results.json 2>&1 || PROD_AUDIT_STATUS=$?

        # Run full audit for analysis (unless ignoring dev dependencies)
        if [ "$IGNORE_DEV" = "false" ]; then
          echo "üîç Running full dependency audit..."
          FULL_AUDIT_STATUS=0
          npm audit --audit-level=$AUDIT_LEVEL --json > audit-results.json 2>&1 || FULL_AUDIT_STATUS=$?
        else
          echo "‚ö†Ô∏è Skipping development dependency audit (ignore-dev-vulns=true)"
          # Copy prod results as full results
          cp prod-audit-results.json audit-results.json
          FULL_AUDIT_STATUS=$PROD_AUDIT_STATUS
        fi

        # Analyze results
        PROD_VULNS=0
        DEV_VULNS=0
        TOTAL_VULNS=0

        if [ -f "prod-audit-results.json" ]; then
          # Count production vulnerabilities
          if command -v jq >/dev/null 2>&1; then
            PROD_VULNS=$(cat prod-audit-results.json | jq '.metadata.vulnerabilities.total // 0' 2>/dev/null || echo "0")
          fi
        fi

        if [ -f "audit-results.json" ]; then
          # Count total vulnerabilities
          if command -v jq >/dev/null 2>&1; then
            TOTAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0' 2>/dev/null || echo "0")
            DEV_VULNS=$((TOTAL_VULNS - PROD_VULNS))
          fi
        fi

        echo "üìä Vulnerability Summary:"
        echo "  Production Dependencies: $PROD_VULNS vulnerabilities"
        echo "  Development Dependencies: $DEV_VULNS vulnerabilities"
        echo "  Total: $TOTAL_VULNS vulnerabilities"

        # Set outputs
        echo "prod-vulns=$PROD_VULNS" >> $GITHUB_OUTPUT
        echo "dev-vulns=$DEV_VULNS" >> $GITHUB_OUTPUT
        echo "total-vulns=$TOTAL_VULNS" >> $GITHUB_OUTPUT

        # Determine status based on production dependencies
        if [ $PROD_VULNS -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "‚úÖ No vulnerabilities in production dependencies"
          if [ $DEV_VULNS -gt 0 ]; then
            echo "‚ö†Ô∏è Development dependencies have vulnerabilities (non-blocking)"
            echo "üí° Consider updating development dependencies when possible"
          fi
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "‚ùå Production dependencies have vulnerabilities that need attention"
          
          # Show production vulnerability details
          if [ -f "prod-audit-results.json" ]; then
            echo "üîç Production vulnerabilities detected:"
            cat prod-audit-results.json | jq -r '.vulnerabilities | to_entries[] | select(.value.isDirect == true) | "\(.key): \(.value.severity)"' 2>/dev/null || echo "Unable to parse production audit results"
          fi
          
          if [ "${{ inputs.fail-on-error }}" = "true" ]; then
            echo "‚ùå Failing due to production security vulnerabilities"
            exit 1
          fi
        fi

    - name: Autobuild for CodeQL
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      id: codeql-analysis
      uses: github/codeql-action/analyze@v3
      with:
        upload: ${{ inputs.upload-sarif }}
        output: ${{ inputs.working-directory }}/codeql-results
      continue-on-error: true

    - name: Process CodeQL Results
      id: process-results
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üìä Processing security analysis results..."

        ISSUES_COUNT=0
        if [ -d "codeql-results" ]; then
          # Count issues from SARIF files
          for sarif in codeql-results/*.sarif; do
            if [ -f "$sarif" ]; then
              SARIF_ISSUES=$(cat "$sarif" | jq '.runs[].results | length' 2>/dev/null || echo "0")
              ISSUES_COUNT=$((ISSUES_COUNT + SARIF_ISSUES))
            fi
          done
        fi

        echo "Found $ISSUES_COUNT security issues"
        echo "issues=$ISSUES_COUNT" >> $GITHUB_OUTPUT

        if [ $ISSUES_COUNT -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Generate Security Summary
      id: summary
      shell: bash
      run: |
        CODEQL_STATUS="${{ steps.codeql-analysis.outputs.status || 'success' }}"
        DEPENDENCY_STATUS="${{ steps.dependency-check.outputs.status || 'success' }}"
        ISSUES_COUNT="${{ steps.process-results.outputs.issues || '0' }}"
        PROD_VULNS="${{ steps.dependency-check.outputs.prod-vulns || '0' }}"
        DEV_VULNS="${{ steps.dependency-check.outputs.dev-vulns || '0' }}"
        TOTAL_VULNS="${{ steps.dependency-check.outputs.total-vulns || '0' }}"

        # Calculate security score (0-100) with nuanced scoring
        SCORE=100

        # CodeQL issues impact
        if [ "$CODEQL_STATUS" = "failure" ]; then
          SCORE=$((SCORE - 30))
        fi

        # Production dependency vulnerabilities (critical impact)
        if [ $PROD_VULNS -gt 0 ]; then
          PROD_PENALTY=$((PROD_VULNS * 15))  # 15 points per production vuln
          SCORE=$((SCORE - PROD_PENALTY))
        fi

        # Development dependency vulnerabilities (minor impact)
        if [ $DEV_VULNS -gt 0 ]; then
          DEV_PENALTY=$((DEV_VULNS * 2))  # 2 points per dev vuln
          SCORE=$((SCORE - DEV_PENALTY))
        fi

        # CodeQL static analysis issues
        if [ $ISSUES_COUNT -gt 0 ]; then
          ISSUE_PENALTY=$((ISSUES_COUNT * 5))  # 5 points per issue
          SCORE=$((SCORE - ISSUE_PENALTY))
        fi

        # Ensure score doesn't go below 0
        if [ $SCORE -lt 0 ]; then
          SCORE=0
        fi

        echo "score=$SCORE" >> $GITHUB_OUTPUT
        echo "issues=$ISSUES_COUNT" >> $GITHUB_OUTPUT

        echo "üõ°Ô∏è Security Analysis Summary"
        echo "============================"
        echo "CodeQL Analysis: $CODEQL_STATUS"
        echo "Dependency Check: $DEPENDENCY_STATUS"
        echo "Production Vulnerabilities: $PROD_VULNS"
        echo "Development Vulnerabilities: $DEV_VULNS"
        echo "CodeQL Issues Found: $ISSUES_COUNT"
        echo "Security Score: $SCORE/100"

        if [ $SCORE -ge 90 ]; then
          echo "üèÜ Excellent security posture!"
        elif [ $SCORE -ge 70 ]; then
          echo "‚úÖ Good security practices"
        elif [ $SCORE -ge 50 ]; then
          echo "‚ö†Ô∏è Security improvements needed"
        else
          echo "‚ùå Critical security issues require attention"
        fi

        # Additional guidance for development vulnerabilities
        if [ $DEV_VULNS -gt 0 ] && [ $PROD_VULNS -eq 0 ]; then
          echo ""
          echo "üí° Development Dependency Recommendations:"
          echo "  - Development vulnerabilities don't affect production runtime"
          echo "  - Consider updating development dependencies when feasible"
          echo "  - Review if vulnerable dev dependencies are actually needed"
        fi
        echo "Issues Found: $ISSUES_COUNT"
        echo "Security Score: $SCORE/100"

        if [ $SCORE -ge 90 ]; then
          echo "üèÜ Excellent security posture!"
        elif [ $SCORE -ge 70 ]; then
          echo "‚úÖ Good security practices"
        elif [ $SCORE -ge 50 ]; then
          echo "‚ö†Ô∏è Security improvements needed"
        else
          echo "‚ùå Critical security issues require attention"
        fi

branding:
  icon: 'shield'
  color: 'blue'
