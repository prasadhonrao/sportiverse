name: WebApp CI/CD Pipeline

on:
  push:
    paths:
      - 'src/webapp/**'
      - '.github/workflows/webapp-cd.yml'
      - '.github/actions/**'
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'staging'
          - 'prod'
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment regardless of branch'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'

permissions:
  actions: read
  contents: read
  security-events: write
  deployments: write
  id-token: write

jobs:
  # ============================================================================
  # BRANCH STRATEGY ENFORCEMENT
  # ============================================================================

  branch-strategy:
    name: 🛡️ Branch Strategy Check
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.strategy.outputs.deploy }}
      target-environment: ${{ steps.strategy.outputs.environment }}
      deployment-reason: ${{ steps.strategy.outputs.reason }}
    steps:
      - name: Determine Deployment Strategy
        id: strategy
        run: |
          echo "=== Branch Strategy Analysis ==="
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Force Deploy: ${{ github.event.inputs.force_deploy }}"
          echo "Manual Environment: ${{ github.event.inputs.environment }}"

          # Default values
          DEPLOY="false"
          ENVIRONMENT=""
          REASON=""

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              DEPLOY="true"
              ENVIRONMENT="${{ github.event.inputs.environment }}"
              REASON="Manual deployment with force flag"
            elif [ "${{ github.ref_name }}" = "main" ] || [ "${{ github.ref_name }}" = "develop" ]; then
              DEPLOY="true"
              ENVIRONMENT="${{ github.event.inputs.environment }}"
              REASON="Manual deployment from allowed branch"
            else
              DEPLOY="false"
              REASON="Manual deployment blocked - use force_deploy for feature branches"
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            case "${{ github.ref_name }}" in
              "main")
                DEPLOY="true"
                ENVIRONMENT="prod"
                REASON="Automatic production deployment"
                ;;
              "develop")
                DEPLOY="true"
                ENVIRONMENT="dev"
                REASON="Automatic development deployment"
                ;;
              *)
                DEPLOY="false"
                REASON="Automatic deployment not configured for this branch"
                ;;
            esac
          fi

          echo "=== Strategy Results ==="
          echo "Deploy: $DEPLOY"
          echo "Environment: $ENVIRONMENT"
          echo "Reason: $REASON"

          echo "deploy=$DEPLOY" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT

  # ============================================================================
  # CONTINUOUS INTEGRATION PIPELINE
  # ============================================================================

  ci:
    name: � CI Pipeline
    needs: branch-strategy
    if: needs.branch-strategy.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      artifact-name: ${{ steps.ci.outputs.artifact-name }}
      quality-passed: ${{ steps.ci.outputs.quality-passed }}
      test-results: ${{ steps.ci.outputs.test-results }}
      coverage-percentage: ${{ steps.ci.outputs.coverage-percentage }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run CI Pipeline
        id: ci
        uses: ./.github/actions/node-ci
        with:
          node-version: '22'
          working-directory: 'src/webapp'
          skip-tests: ${{ github.event.inputs.skip_tests == 'true' }}
          package-manager: 'npm'
          ignore-audit-errors: true
          audit-level: 'moderate'

  security-scan:
    name: 🛡️ Security Analysis
    needs: [branch-strategy, ci]
    if: needs.branch-strategy.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Security Scan
        uses: ./.github/actions/security-scan
        with:
          working-directory: 'src/webapp'
          language: 'javascript'
          audit-level: 'moderate'
          fail-on-error: false

  # ============================================================================
  # DEPLOYMENT PIPELINE
  # ============================================================================

  deploy-dev:
    name: 🚀 Deploy to Development
    needs: [branch-strategy, ci, security-scan]
    if: needs.branch-strategy.outputs.target-environment == 'dev' && needs.ci.outputs.quality-passed == 'true'
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      deployment-url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci.outputs.artifact-name }}
          path: ./build

      - name: Deploy to Azure App Service
        id: deploy
        run: |
          echo "Deploying to Development environment..."
          echo "webapp-url=https://sportiverse-webapp-dev.azurewebsites.net" >> $GITHUB_OUTPUT
          # TODO: Add actual Azure deployment steps

  deploy-staging:
    name: 🎭 Deploy to Staging
    needs: [branch-strategy, ci, security-scan]
    if: needs.branch-strategy.outputs.target-environment == 'staging' && needs.ci.outputs.quality-passed == 'true'
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      deployment-url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci.outputs.artifact-name }}
          path: ./build

      - name: Deploy to Azure App Service
        id: deploy
        run: |
          echo "Deploying to Staging environment..."
          echo "webapp-url=https://sportiverse-webapp-staging.azurewebsites.net" >> $GITHUB_OUTPUT
          # TODO: Add actual Azure deployment steps

  deploy-prod:
    name: 🏭 Deploy to Production
    needs: [branch-strategy, ci, security-scan]
    if: needs.branch-strategy.outputs.target-environment == 'prod' && needs.ci.outputs.quality-passed == 'true'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci.outputs.artifact-name }}
          path: ./build

      - name: Deploy to Azure App Service
        id: deploy
        run: |
          echo "Deploying to Production environment..."
          echo "webapp-url=https://sportiverse-webapp.azurewebsites.net" >> $GITHUB_OUTPUT
          # TODO: Add actual Azure deployment steps

  # ============================================================================
  # POST-DEPLOYMENT VERIFICATION
  # ============================================================================

  health-check:
    name: 🏥 Health Check
    needs: [branch-strategy, ci, deploy-dev, deploy-staging, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success')
    runs-on: ubuntu-latest

    steps:
      - name: Health Check
        run: |
          echo "Performing health check..."
          APP_URL="${{ needs.deploy-dev.outputs.deployment-url || needs.deploy-staging.outputs.deployment-url || needs.deploy-prod.outputs.deployment-url }}"
          echo "Application URL: $APP_URL"
          
          # Basic health check
          if curl -f "$APP_URL" > /dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

  # ============================================================================
  # NOTIFICATIONS & STATUS REPORTING
  # ============================================================================

  notifications:
    name: 📢 Notifications
    needs: [branch-strategy, ci, security-scan, deploy-dev, deploy-staging, deploy-prod, health-check]
    if: always() && needs.branch-strategy.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy Notifications
        uses: ./.github/actions/notify
        with:
          component-name: 'WebApp'
          node-version: '22'
          status: ${{ needs.ci.outputs.quality-passed == 'true' && needs.health-check.result == 'success' && 'success' || 'failure' }}
          ci-results: |
            **📊 Code Quality:** ${{ needs.ci.outputs.quality-passed == 'true' && '✅ Passed' || '❌ Failed' }}
            **🧪 Tests:** ${{ needs.ci.outputs.test-results }}
            **📈 Coverage:** ${{ needs.ci.outputs.coverage-percentage }}%
            **🚀 Deployment:** ${{ needs.branch-strategy.outputs.target-environment }}
            **🏥 Health Check:** ${{ needs.health-check.result == 'success' && '✅ Passed' || '❌ Failed' }}
          coverage-percentage: ${{ needs.ci.outputs.coverage-percentage }}
          deployment-url: ${{ needs.deploy-dev.outputs.deployment-url || needs.deploy-staging.outputs.deployment-url || needs.deploy-prod.outputs.deployment-url }}
