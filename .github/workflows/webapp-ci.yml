name: WebApp CI Pipeline

on:
  push:
    paths:
      - 'src/webapp/**'
      - '.github/workflows/webapp-ci.yml'
      - '.github/actions/**'
    branches:
      - develop
      - 'feature/**'
      - 'hotfix/**'
      - 'release/**'
  pull_request:
    paths:
      - 'src/webapp/**'
      - '.github/workflows/webapp-ci.yml'
      - '.github/actions/**'
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for debugging)'
        required: false
        default: false
        type: boolean
      notify_on_success:
        description: 'Send notification on success'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '22'
  COMPONENT_NAME: 'WebApp'

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write
  checks: write

jobs:
  # ============================================================================
  # CONTINUOUS INTEGRATION
  # ============================================================================

  ci:
    name: üîÑ CI Pipeline
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.ci.outputs.artifact-name }}
      quality-passed: ${{ steps.ci.outputs.quality-passed }}
      test-results: ${{ steps.ci.outputs.test-results }}
      coverage-percentage: ${{ steps.ci.outputs.coverage-percentage }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Node.js CI Pipeline
        id: ci
        uses: ./.github/actions/node-ci
        with:
          working-directory: 'src/webapp'
          node-version: ${{ env.NODE_VERSION }}
          skip-tests: ${{ github.event.inputs.skip_tests }}
          package-manager: 'npm'
          upload-coverage: 'true'
          audit-level: 'high'
          ignore-audit-errors: 'true'

  # ============================================================================
  # ADVANCED SECURITY SCANNING
  # ============================================================================

  security-scan:
    name: üõ°Ô∏è Security Analysis
    runs-on: ubuntu-latest
    needs: ci
    if: always()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Advanced Security Scan
        uses: ./.github/actions/security-scan
        with:
          working-directory: 'src/webapp'
          language: 'javascript'
          dependency-check: 'true'
          upload-sarif: 'true'
          audit-level: 'high'
          ignore-dev-vulns: 'true'
          fail-on-critical: 'false'

  docker-security:
    name: üê≥ Docker Security
    runs-on: ubuntu-latest
    needs: ci
    if: success()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          cd src/webapp
          docker build -t sportiverse-webapp:latest .

      - name: Docker Security Scan
        uses: ./.github/actions/docker-security
        with:
          image-ref: 'sportiverse-webapp:latest'
          dockerfile-path: 'src/webapp/Dockerfile'
          fail-on-severity: 'CRITICAL'
          upload-results: 'true'

  # ============================================================================
  # PULL REQUEST INTEGRATION
  # ============================================================================

  pr-integration:
    name: üîó PR Integration
    needs: ci
    if: github.event_name == 'pull_request' && always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Pull Request
        uses: ./.github/actions/pr-integration
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ needs.ci.outputs.quality-passed == 'true' && 'success' || 'failure' }}
          ci-results: |
            **üìä Code Quality:** ${{ needs.ci.outputs.quality-passed == 'true' && '‚úÖ Passed' || '‚ùå Failed' }}
            **üß™ Tests:** ${{ needs.ci.outputs.test-results }}
            **üìà Coverage:** ${{ needs.ci.outputs.coverage-percentage }}%
          coverage-percentage: ${{ needs.ci.outputs.coverage-percentage }}
          auto-merge: 'false'
          update-existing-comment: 'true'

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================

  notify:
    name: üì¢ Notifications
    needs: ci
    if: always() && (needs.ci.outputs.quality-passed != 'true' || github.event.inputs.notify_on_success == 'true')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Send Notifications
        uses: ./.github/actions/notify
        with:
          status: ${{ needs.ci.outputs.quality-passed == 'true' && 'success' || 'failure' }}
          title: '${{ env.COMPONENT_NAME }} CI Pipeline'
          message: |
            Pipeline completed for ${{ env.COMPONENT_NAME }} on branch `${{ github.ref_name }}`

            **Results:**
            - Quality Gates: ${{ needs.ci.outputs.quality-passed == 'true' && '‚úÖ Passed' || '‚ùå Failed' }}
            - Tests: ${{ needs.ci.outputs.test-results }}
            - Coverage: ${{ needs.ci.outputs.coverage-percentage }}%
            - Artifact: ${{ needs.ci.outputs.artifact-name }}
          workflow-name: ${{ github.workflow }}
          component: ${{ env.COMPONENT_NAME }}
          include-details: 'true'
          # slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          # teams-webhook: ${{ secrets.TEAMS_WEBHOOK }}
