name: PR Integration & Comments

on:
  workflow_call:
    inputs:
      ci-result:
        description: 'CI pipeline result (true/false)'
        type: string
        required: true
      test-results:
        description: 'Test execution results'
        type: string
        required: true
      build-artifact:
        description: 'Build artifact name'
        type: string
        required: false
      component-name:
        description: 'Name of the component (WebAPI, WebApp, etc.)'
        type: string
        required: true
      node-version:
        description: 'Node.js version used'
        type: string
        required: true
      health-endpoint:
        description: 'Health check endpoint for the component'
        type: string
        default: '/status'
      component-description:
        description: 'Description of what the component does'
        type: string
        default: 'application component'

jobs:
  # ============================================================================
  # PULL REQUEST COMMENT
  # ============================================================================

  pr-comment:
    name: 💬 PR Comment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const qualityPassed = '${{ inputs.ci-result }}' === 'true';
            const testResults = '${{ inputs.test-results }}';
            const artifactName = '${{ inputs.build-artifact }}';
            const componentName = '${{ inputs.component-name }}';
            const componentDesc = '${{ inputs.component-description }}';

            const statusIcon = qualityPassed ? '✅' : '❌';
            const statusText = qualityPassed ? 'PASSED' : 'FAILED';

            const body = `## ${statusIcon} ${componentName} CI Pipeline ${statusText}

            ### 📊 Results Summary
            - **Quality Gate**: ${statusIcon} ${statusText}
            - **Test Results**: ${testResults}
            - **Node.js Version**: ${{ inputs.node-version }}
            - **Build Artifact**: ${artifactName || 'Not generated'}
            - **Component**: ${componentName} (${componentDesc})

            ### 📋 Pipeline Details
            - **Commit**: \`${{ github.sha }}\`
            - **Workflow Run**: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ${qualityPassed 
              ? `### ✅ Ready for Review\nAll CI checks passed! This PR is ready for code review and can be merged safely.\n\n**Next Steps:**\n- Code review by team members\n- Merge to trigger deployment pipeline\n- ${componentName} will be available at health endpoint: \`${{ inputs.health-endpoint }}\`` 
              : `### ❌ Action Required\nCI pipeline failed. Please review the workflow logs and fix the issues before proceeding.\n\n**Common Issues:**\n- Linting errors (ESLint)\n- Failed unit tests\n- Security vulnerabilities\n- Build/compilation errors`}

            ---
            *Automated comment by ${componentName} CI Pipeline*`;

            // Find existing CI comment for this component
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes(`${componentName} CI Pipeline`) && 
              comment.user.type === 'Bot'
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
              console.log(`Updated existing ${componentName} CI comment`);
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
              console.log(`Created new ${componentName} CI comment`);
            }

  # ============================================================================
  # PR STATUS CHECKS
  # ============================================================================

  pr-status-check:
    name: 🔍 PR Status Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Set PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const qualityPassed = '${{ inputs.ci-result }}' === 'true';
            const componentName = '${{ inputs.component-name }}';

            // Create a check run for better PR integration
            const checkName = `${componentName} CI Quality Gate`;
            const conclusion = qualityPassed ? 'success' : 'failure';
            const title = qualityPassed ? 
              `✅ ${componentName} CI passed all quality checks` : 
              `❌ ${componentName} CI failed quality checks`;

            const summary = qualityPassed ? 
              `All CI checks passed for ${componentName}:\n- ✅ Code linting\n- ✅ Unit tests\n- ✅ Security audit\n- ✅ Build validation` :
              `CI checks failed for ${componentName}:\n- Review workflow logs\n- Fix identified issues\n- Re-run CI pipeline`;

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: checkName,
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: title,
                summary: summary,
                text: `Test Results: ${{ inputs.test-results }}\nNode.js Version: ${{ inputs.node-version }}\nBuild Artifact: ${{ inputs.build-artifact || 'Not generated' }}`
              }
            });

            console.log(`Created check run: ${checkName} with conclusion: ${conclusion}`);

  # ============================================================================
  # PR LABELS MANAGEMENT
  # ============================================================================

  pr-labels:
    name: 🏷️ PR Labels Management
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Manage PR Labels
        uses: actions/github-script@v7
        with:
          script: |
            const qualityPassed = '${{ inputs.ci-result }}' === 'true';
            const componentName = '${{ inputs.component-name }}';

            // Define labels
            const ciPassedLabel = `ci-passed-${componentName.toLowerCase()}`;
            const ciFailedLabel = `ci-failed-${componentName.toLowerCase()}`;
            const readyForReviewLabel = 'ready-for-review';
            const needsFixLabel = 'needs-fix';

            // Get current labels
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const currentLabelNames = currentLabels.map(label => label.name);

            // Remove old CI labels
            const labelsToRemove = [ciPassedLabel, ciFailedLabel, readyForReviewLabel, needsFixLabel]
              .filter(label => currentLabelNames.includes(label));

            for (const label of labelsToRemove) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: label,
              });
            }

            // Add appropriate labels
            const labelsToAdd = qualityPassed ? 
              [ciPassedLabel, readyForReviewLabel] : 
              [ciFailedLabel, needsFixLabel];

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labelsToAdd,
            });

            console.log(`Updated PR labels: removed [${labelsToRemove.join(', ')}], added [${labelsToAdd.join(', ')}]`);
