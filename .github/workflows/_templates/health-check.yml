name: Health Check & Smoke Tests

on:
  workflow_call:
    inputs:
      application-url:
        description: 'URL of the application to test'
        type: string
        required: true
      health-endpoint:
        description: 'Health check endpoint'
        type: string
        default: '/status'
      environment:
        description: 'Target environment'
        type: string
        required: true
      component-type:
        description: 'Type of component (api, webapp)'
        type: string
        required: true
      run-smoke-tests:
        description: 'Whether to run comprehensive smoke tests'
        type: boolean
        default: true
    outputs:
      health-status:
        description: 'Health check status'
        value: ${{ jobs.health-check.outputs.status }}
      smoke-test-results:
        description: 'Smoke test results'
        value: ${{ jobs.smoke-tests.outputs.results }}

jobs:
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.health.outputs.status }}

    steps:
      - name: Basic Health Check
        id: health
        run: |
          echo "üè• Performing comprehensive health check..."
          echo "üéØ Environment: ${{ inputs.environment }}"
          echo "üîó URL: ${{ inputs.application-url }}"
          echo "üì° Endpoint: ${{ inputs.health-endpoint }}"

          # Perform health check
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ inputs.application-url }}${{ inputs.health-endpoint }}" || echo "000")

          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed (HTTP $response)"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Health check failed (HTTP $response)"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Response Time Check
        run: |
          echo "‚è±Ô∏è Checking response times..."

          total_time=$(curl -w "%{time_total}" -s -o /dev/null "${{ inputs.application-url }}${{ inputs.health-endpoint }}")

          echo "üìä Response time: ${total_time}s"

          # Convert to milliseconds for comparison
          time_ms=$(echo "$total_time * 1000" | bc)

          if (( $(echo "$time_ms < 5000" | bc -l) )); then
            echo "‚úÖ Response time acceptable (< 5s)"
          else
            echo "‚ö†Ô∏è Response time slow (> 5s)"
          fi

  smoke-tests:
    name: üí® Smoke Tests
    runs-on: ubuntu-latest
    needs: health-check
    if: inputs.run-smoke-tests == true && needs.health-check.outputs.status == 'healthy'
    outputs:
      results: ${{ steps.tests.outputs.results }}

    steps:
      - name: API Smoke Tests
        if: inputs.component-type == 'api'
        id: api-tests
        run: |
          echo "üí® Running API smoke tests..."
          base_url="${{ inputs.application-url }}"

          # Test basic endpoints
          endpoints=(
            "/status"
            "/api/products"
            "/api/users"
            "/api/orders"
          )

          failed_tests=0
          total_tests=${#endpoints[@]}

          for endpoint in "${endpoints[@]}"; do
            echo "üîç Testing: $endpoint"
            response=$(curl -s -o /dev/null -w "%{http_code}" "$base_url$endpoint" || echo "000")
            
            if [ "$response" = "200" ] || [ "$response" = "401" ] || [ "$response" = "403" ]; then
              echo "‚úÖ $endpoint: HTTP $response (OK)"
            else
              echo "‚ùå $endpoint: HTTP $response (FAIL)"
              failed_tests=$((failed_tests + 1))
            fi
          done

          echo "üìä API Tests: $((total_tests - failed_tests))/$total_tests passed"

          if [ $failed_tests -eq 0 ]; then
            echo "results=passed" >> $GITHUB_OUTPUT
          else
            echo "results=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: WebApp Smoke Tests
        if: inputs.component-type == 'webapp'
        id: webapp-tests
        run: |
          echo "üí® Running WebApp smoke tests..."
          base_url="${{ inputs.application-url }}"

          # Test basic pages
          pages=(
            "/"
            "/login"
            "/products"
          )

          failed_tests=0
          total_tests=${#pages[@]}

          for page in "${pages[@]}"; do
            echo "üîç Testing: $page"
            response=$(curl -s -o /dev/null -w "%{http_code}" "$base_url$page" || echo "000")
            
            if [ "$response" = "200" ]; then
              echo "‚úÖ $page: HTTP $response (OK)"
            else
              echo "‚ùå $page: HTTP $response (FAIL)"
              failed_tests=$((failed_tests + 1))
            fi
          done

          echo "üìä WebApp Tests: $((total_tests - failed_tests))/$total_tests passed"

          if [ $failed_tests -eq 0 ]; then
            echo "results=passed" >> $GITHUB_OUTPUT
          else
            echo "results=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Test Summary
        id: tests
        run: |
          if [ "${{ inputs.component-type }}" = "api" ]; then
            echo "results=${{ steps.api-tests.outputs.results }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.component-type }}" = "webapp" ]; then
            echo "results=${{ steps.webapp-tests.outputs.results }}" >> $GITHUB_OUTPUT
          else
            echo "results=skipped" >> $GITHUB_OUTPUT
          fi

          echo "üéâ Smoke tests completed for ${{ inputs.environment }} environment"
