name: WebAPI CI/CD Pipeline

on:
  push:
    paths:
      - 'src/webapi/**'
      - '.github/workflows/webapi-cd.yml'
      - '.github/actions/**'
    branches:
      - main
      - develop
      - 'feature/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'staging'
          - 'prod'
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean
      seed_database:
        description: 'Seed database with sample data'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment regardless of branch'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'

permissions:
  actions: read
  contents: read
  security-events: write
  id-token: write

jobs:
  # ============================================================================
  # CI PIPELINE
  # ============================================================================

  ci:
    name: ÔøΩ CI Pipeline
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      artifact-name: ${{ steps.ci.outputs.artifact-name }}
      quality-passed: ${{ steps.ci.outputs.quality-passed }}
      test-results: ${{ steps.ci.outputs.test-results }}
      coverage-percentage: ${{ steps.ci.outputs.coverage-percentage }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run CI Pipeline
        id: ci
        uses: ./.github/actions/node-ci
        with:
          node-version: '22'
          working-directory: 'src/webapi'
          skip-tests: ${{ github.event.inputs.skip_tests == 'true' }}
          package-manager: 'npm'
          ignore-audit-errors: true
          audit-level: 'moderate'

  security-scan:
    name: üõ°Ô∏è Security Analysis
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Security Scan
        uses: ./.github/actions/security-scan
        with:
          working-directory: 'src/webapi'
          language: 'javascript'
          audit-level: 'moderate'
          fail-on-error: false

  # ============================================================================
  # DETERMINE DEPLOYMENT STRATEGY
  # ============================================================================

  determine-deployment:
    name: üéØ Determine Deployment Strategy
    runs-on: ubuntu-latest
    needs: [ci, security-scan]
    if: needs.ci.outputs.quality-passed == 'true'
    outputs:
      deploy-dev: ${{ steps.strategy.outputs.deploy-dev }}
      deploy-staging: ${{ steps.strategy.outputs.deploy-staging }}
      deploy-prod: ${{ steps.strategy.outputs.deploy-prod }}
      target-environment: ${{ steps.strategy.outputs.target-environment }}

    steps:
      - name: Determine Deployment Strategy
        id: strategy
        run: |
          echo "üéØ Determining deployment strategy..."
          echo "üìã Branch: ${{ github.ref }}"
          echo "üéõÔ∏è Manual Environment: ${{ github.event.inputs.environment }}"
          echo "üîÑ Force Deploy: ${{ github.event.inputs.force_deploy }}"

          # Branch-based deployment strategy
          deploy_dev="false"
          deploy_staging="false"
          deploy_prod="false"
          target_env=""

          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            # Manual override
            target_env="${{ github.event.inputs.environment }}"
            echo "üîÑ Force deployment to: $target_env"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual workflow dispatch
            target_env="${{ github.event.inputs.environment }}"
            echo "üéõÔ∏è Manual deployment to: $target_env"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Main branch -> Production
            target_env="prod"
            echo "üöÄ Main branch detected -> Production deployment"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            # Develop branch -> Staging
            target_env="staging"
            echo "üîÑ Develop branch detected -> Staging deployment"
          elif [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
            # Feature branch -> Development
            target_env="dev"
            echo "üõ†Ô∏è Feature branch detected -> Development deployment"
          else
            # Default to development
            target_env="dev"
            echo "üìã Default -> Development deployment"
          fi

          # Set deployment flags
          if [ "$target_env" = "dev" ]; then
            deploy_dev="true"
          elif [ "$target_env" = "staging" ]; then
            deploy_staging="true"
          elif [ "$target_env" = "prod" ]; then
            deploy_prod="true"
          fi

          # Output results
          echo "deploy-dev=$deploy_dev" >> $GITHUB_OUTPUT
          echo "deploy-staging=$deploy_staging" >> $GITHUB_OUTPUT
          echo "deploy-prod=$deploy_prod" >> $GITHUB_OUTPUT
          echo "target-environment=$target_env" >> $GITHUB_OUTPUT

          echo "‚úÖ Deployment strategy determined"
          echo "üéØ Target: $target_env"

  # ============================================================================
  # DEVELOPMENT DEPLOYMENT
  # ============================================================================

  deploy-dev:
    name: üöÄ Deploy to Development
    if: needs.determine-deployment.outputs.deploy-dev == 'true'
    needs: [ci, security-scan, determine-deployment]
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      deployment-url: ${{ steps.deploy.outputs.api-url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci.outputs.artifact-name }}
          path: ./build

      - name: Deploy to Azure App Service
        id: deploy
        run: |
          echo "Deploying WebAPI to Development environment..."
          echo "Seed Database: ${{ github.event.inputs.seed_database == 'true' }}"
          echo "api-url=https://sportiverse-webapi-dev.azurewebsites.net" >> $GITHUB_OUTPUT
          # TODO: Add actual Azure deployment steps

  # ============================================================================
  # STAGING DEPLOYMENT
  # ============================================================================

  deploy-staging:
    name: üé≠ Deploy to Staging
    if: needs.determine-deployment.outputs.deploy-staging == 'true'
    needs: [ci, security-scan, determine-deployment]
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      deployment-url: ${{ steps.deploy.outputs.api-url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci.outputs.artifact-name }}
          path: ./build

      - name: Deploy to Azure App Service
        id: deploy
        run: |
          echo "Deploying WebAPI to Staging environment..."
          echo "Seed Database: ${{ github.event.inputs.seed_database == 'true' }}"
          echo "api-url=https://sportiverse-webapi-staging.azurewebsites.net" >> $GITHUB_OUTPUT
          # TODO: Add actual Azure deployment steps

  # ============================================================================
  # PRODUCTION DEPLOYMENT
  # ============================================================================

  deploy-prod:
    name: üè≠ Deploy to Production
    if: needs.determine-deployment.outputs.deploy-prod == 'true'
    needs: [ci, security-scan, determine-deployment]
    runs-on: ubuntu-latest
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.api-url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci.outputs.artifact-name }}
          path: ./build

      - name: Deploy to Azure App Service
        id: deploy
        run: |
          echo "Deploying WebAPI to Production environment..."
          echo "Seed Database: false (never seed production)"
          echo "api-url=https://sportiverse-webapi.azurewebsites.net" >> $GITHUB_OUTPUT
          # TODO: Add actual Azure deployment steps

  # ============================================================================
  # POST-DEPLOYMENT VERIFICATION
  # ============================================================================

  smoke-tests:
    name: üí® Smoke Tests
    needs: [determine-deployment, deploy-dev, deploy-staging, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success')
    runs-on: ubuntu-latest

    steps:
      - name: API Health Check
        run: |
          echo "Performing WebAPI health check..."
          API_URL="${{ needs.deploy-dev.outputs.deployment-url || needs.deploy-staging.outputs.deployment-url || needs.deploy-prod.outputs.deployment-url }}"
          echo "API URL: $API_URL"
          
          # Basic health check for API status endpoint
          if curl -f "$API_URL/status" > /dev/null 2>&1; then
            echo "‚úÖ API health check passed"
          else
            echo "‚ùå API health check failed"
            exit 1
          fi
          
      - name: API Smoke Tests
        run: |
          echo "Running API smoke tests..."
          API_URL="${{ needs.deploy-dev.outputs.deployment-url || needs.deploy-staging.outputs.deployment-url || needs.deploy-prod.outputs.deployment-url }}"
          
          # Test basic API endpoints
          echo "Testing /api/products endpoint..."
          if curl -f "$API_URL/api/products" > /dev/null 2>&1; then
            echo "‚úÖ Products endpoint accessible"
          else
            echo "‚ö†Ô∏è Products endpoint not accessible (may be expected)"
          fi

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================

  notifications:
    name: ÔøΩ Notifications
    needs: [ci, security-scan, determine-deployment, deploy-dev, deploy-staging, deploy-prod, smoke-tests]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy Notifications
        uses: ./.github/actions/notify
        with:
          component-name: 'WebAPI'
          node-version: '22'
          status: ${{ needs.ci.outputs.quality-passed == 'true' && needs.smoke-tests.result == 'success' && 'success' || 'failure' }}
          ci-results: |
            **üìä Code Quality:** ${{ needs.ci.outputs.quality-passed == 'true' && '‚úÖ Passed' || '‚ùå Failed' }}
            **üß™ Tests:** ${{ needs.ci.outputs.test-results }}
            **ÔøΩ Coverage:** ${{ needs.ci.outputs.coverage-percentage }}%
            **üöÄ Deployment:** ${{ needs.determine-deployment.outputs.target-environment }}
            **ÔøΩ Smoke Tests:** ${{ needs.smoke-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
            **üå± Database Seeding:** ${{ github.event.inputs.seed_database == 'true' && '‚úÖ Enabled' || '‚ùå Disabled' }}
          coverage-percentage: ${{ needs.ci.outputs.coverage-percentage }}
          deployment-url: ${{ needs.deploy-dev.outputs.deployment-url || needs.deploy-staging.outputs.deployment-url || needs.deploy-prod.outputs.deployment-url }}
