name: WebAPI CD Pipeline

on:
  # Release-based deployment only
  push:
    tags:
      - 'webapi-v*'           # webapi-v1.0.0, webapi-v1.1.0-dev
  
  # Manual emergency deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'prod'
      release_tag:
        description: 'Release tag to deploy (e.g., webapi-v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip CI validation (emergency only)'
        required: false
        default: false
        type: boolean
      seed_database:
        description: 'Seed database with sample data'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'

permissions:
  actions: read
  contents: read
  security-events: write
  id-token: write

jobs:
  # ============================================================================
  # RELEASE VALIDATION & ENVIRONMENT DETERMINATION
  # ============================================================================

  validate-release:
    name: üè∑Ô∏è Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.release.outputs.tag }}
      target-env: ${{ steps.release.outputs.environment }}
      is-dev-release: ${{ steps.release.outputs.is-dev }}
      is-prod-release: ${{ steps.release.outputs.is-prod }}
    
    steps:
      - name: Extract Release Information
        id: release
        run: |
          echo "üè∑Ô∏è Analyzing release information..."
          
          if [ "${{ github.event_name }}" = "push" ]; then
            # Tag-based deployment
            TAG="${{ github.ref_name }}"
            echo "üìå Tag-triggered deployment: $TAG"
          else
            # Manual deployment
            TAG="${{ github.event.inputs.release_tag }}"
            echo "üéõÔ∏è Manual deployment: $TAG"
          fi
          
          # Determine target environment
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_ENV="${{ github.event.inputs.environment }}"
            echo "üéØ Manual target: $TARGET_ENV"
          elif [[ "$TAG" =~ -dev$|-beta$|-alpha$|-rc ]]; then
            TARGET_ENV="dev"
            echo "üî® Development release detected"
          else
            TARGET_ENV="prod" 
            echo "üè≠ Production release detected"
          fi
          
          # Validate tag format
          if [[ ! "$TAG" =~ ^webapi-v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "‚ùå Invalid tag format: $TAG"
            echo "Expected format: webapi-v1.0.0 or webapi-v1.0.0-dev"
            exit 1
          fi
          
          # Set outputs
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "is-dev=$( [[ $TARGET_ENV == 'dev' ]] && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
          echo "is-prod=$( [[ $TARGET_ENV == 'prod' ]] && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Release validation completed"
          echo "üè∑Ô∏è Tag: $TAG"
          echo "üéØ Environment: $TARGET_ENV"

  # ============================================================================
  # CI VALIDATION (for release artifacts)
  # ============================================================================

  ci:
    name: üîÑ CI Validation
    needs: validate-release
    if: github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    outputs:
      artifact-name: ${{ steps.ci.outputs.artifact-name }}
      quality-passed: ${{ steps.ci.outputs.quality-passed }}
      test-results: ${{ steps.ci.outputs.test-results }}
      coverage-percentage: ${{ steps.ci.outputs.coverage-percentage }}

    steps:
      - name: Checkout Release Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-release.outputs.release-tag }}

      - name: Run CI Pipeline
        id: ci
        uses: ./.github/actions/node-ci
        with:
          node-version: '22'
          working-directory: 'src/webapi'
          skip-tests: false
          package-manager: 'npm'
          ignore-audit-errors: true
          audit-level: 'moderate'

  security-scan:
    name: üõ°Ô∏è Security Validation
    needs: [validate-release, ci]
    if: github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Release Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-release.outputs.release-tag }}

      - name: Run Security Scan
        uses: ./.github/actions/security-scan
        with:
          working-directory: 'src/webapi'
          language: 'javascript'
          audit-level: 'moderate'
          fail-on-error: false

  # ============================================================================
  # DEVELOPMENT DEPLOYMENT
  # ============================================================================

  deploy-dev:
    name: üöÄ Deploy to Development
    needs: [validate-release, ci, security-scan]
    if: always() && needs.validate-release.outputs.is-dev-release == 'true' && (needs.ci.outputs.quality-passed == 'true' || github.event.inputs.skip_tests == 'true')
    runs-on: ubuntu-latest
    environment: 
      name: development
      url: ${{ steps.deploy.outputs.webapp-url }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout Release Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-release.outputs.release-tag }}

      - name: Download Build Artifact
        if: needs.ci.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci.outputs.artifact-name }}
          path: ./build

      - name: Deploy to Azure App Service
        id: deploy
        run: |
          echo "üöÄ Deploying WebAPI to Development Environment"
          echo "üè∑Ô∏è Release: ${{ needs.validate-release.outputs.release-tag }}"
          echo "üå± Seed Database: ${{ github.event.inputs.seed_database == 'true' }}"
          
          # TODO: Add actual Azure deployment steps here
          # az webapp deployment source config-zip ...
          
          echo "webapp-url=https://sportiverse-webapi-dev.azurewebsites.net" >> $GITHUB_OUTPUT
          echo "‚úÖ Development deployment completed"

  # ============================================================================
  # PRODUCTION DEPLOYMENT (with approval)
  # ============================================================================

  deploy-prod:
    name: üè≠ Deploy to Production
    needs: [validate-release, ci, security-scan]
    if: always() && needs.validate-release.outputs.is-prod-release == 'true' && (needs.ci.outputs.quality-passed == 'true' || github.event.inputs.skip_tests == 'true')
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout Release Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-release.outputs.release-tag }}

      - name: Download Build Artifact
        if: needs.ci.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci.outputs.artifact-name }}
          path: ./build

      - name: Deploy to Azure App Service
        id: deploy
        run: |
          echo "üè≠ Deploying WebAPI to Production Environment"
          echo "üè∑Ô∏è Release: ${{ needs.validate-release.outputs.release-tag }}"
          echo "üîí Production deployment - no database seeding"
          
          # TODO: Add actual Azure deployment steps here
          # az webapp deployment source config-zip ...
          
          echo "webapp-url=https://sportiverse-webapi.azurewebsites.net" >> $GITHUB_OUTPUT
          echo "‚úÖ Production deployment completed"

  # ============================================================================
  # POST-DEPLOYMENT VERIFICATION
  # ============================================================================

  health-check:
    name: üè• Health Check
    needs: [validate-release, deploy-dev, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success')
    runs-on: ubuntu-latest

    steps:
      - name: API Health Check
        run: |
          echo "üè• Performing post-deployment health check..."
          
          API_URL="${{ needs.deploy-dev.outputs.deployment-url || needs.deploy-prod.outputs.deployment-url }}"
          echo "üåê API URL: $API_URL"
          
          # Wait for deployment to stabilize
          echo "‚è≥ Waiting 30 seconds for deployment to stabilize..."
          sleep 30
          
          # Test health endpoint
          echo "üîç Testing /status endpoint..."
          if curl -f "$API_URL/status" --max-time 30; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            exit 1
          fi
          
          # Test API endpoints
          echo "üîç Testing /api/products endpoint..."
          if curl -f "$API_URL/api/products" --max-time 30; then
            echo "‚úÖ API endpoints accessible"
          else
            echo "‚ö†Ô∏è API endpoints may not be ready (acceptable for new deployments)"
          fi

  # ============================================================================
  # DEPLOYMENT NOTIFICATIONS
  # ============================================================================

  notifications:
    name: üì¢ Deployment Notifications
    needs: [validate-release, ci, security-scan, deploy-dev, deploy-prod, health-check]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Send Deployment Notifications
        uses: ./.github/actions/notify
        with:
          component-name: 'WebAPI'
          node-version: '22'
          status: ${{ needs.health-check.result == 'success' && 'success' || 'failure' }}
          ci-results: |
            **üè∑Ô∏è Release:** ${{ needs.validate-release.outputs.release-tag }}
            **üéØ Environment:** ${{ needs.validate-release.outputs.target-env }}
            **üìä Code Quality:** ${{ needs.ci.outputs.quality-passed == 'true' && '‚úÖ Passed' || (github.event.inputs.skip_tests == 'true' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }}
            **üß™ Tests:** ${{ needs.ci.outputs.test-results || 'Skipped' }}
            **üìà Coverage:** ${{ needs.ci.outputs.coverage-percentage || 'N/A' }}%
            **üõ°Ô∏è Security:** ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || (github.event.inputs.skip_tests == 'true' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }}
            **üöÄ Deployment:** ${{ (needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success') && '‚úÖ Success' || '‚ùå Failed' }}
            **üè• Health Check:** ${{ needs.health-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          coverage-percentage: ${{ needs.ci.outputs.coverage-percentage }}
          deployment-url: ${{ needs.deploy-dev.outputs.deployment-url || needs.deploy-prod.outputs.deployment-url }}
