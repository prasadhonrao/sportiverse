name: Azure App Service Infrastructure

on:
  push:
    paths:
      - 'infra/azure/app-service/**'
      - '.github/workflows/infra-azure-app-service.yml'
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy infrastructure to'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'prod'
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
      deploy_reason:
        description: 'Reason for deployment (for tracking)'
        required: false
        default: 'Manual deployment'
        type: string

env:
  AZURE_REGION: 'uksouth'

permissions:
  id-token: write
  contents: read

jobs:
  # ============================================================================
  # INFRASTRUCTURE VALIDATION
  # ============================================================================

  validate-bicep:
    name: üîç Validate Bicep Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}

      - name: Validate Bicep Templates
        run: |
          cd infra/azure/app-service/bicep

          echo "üîç Validating Bicep templates..."

          # Show current configuration
          echo "üìã Current configuration:"
          echo "   Node.js version: $(grep -A1 'Node.js version' main.bicep | grep 'param nodeVersion' | cut -d"'" -f2)"
          echo "   MongoDB version: $(grep -A1 'serverVersion' modules/database/cosmosDb.bicep | grep 'serverVersion' | cut -d"'" -f2)"

          # Validate main template
          az bicep build --file main.bicep --stdout > /dev/null
          echo "‚úÖ Main template validation passed"

          # Validate all modules
          for module in modules/*/*.bicep; do
            if [ -f "$module" ]; then
              az bicep build --file "$module" --stdout > /dev/null
              echo "‚úÖ Module $(basename $module) validation passed"
            fi
          done

          echo "üéâ All Bicep templates are valid"

  # ============================================================================
  # ENVIRONMENT-SPECIFIC DEPLOYMENTS
  # ============================================================================

  deploy-infrastructure-dev:
    name: üèóÔ∏è Deploy Infrastructure (Development)
    runs-on: ubuntu-latest
    needs: validate-bicep
    if: |
      (github.ref == 'refs/heads/develop') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev') ||
      (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-dev]'))
    outputs:
      api-name: ${{ steps.deploy.outputs.apiName }}
      webapp-name: ${{ steps.deploy.outputs.webAppName }}
      resource-group: ${{ steps.deploy.outputs.resourceGroupName }}
      cosmos-connection: ${{ steps.deploy.outputs.cosmosConnectionString }}
      keyvault-name: ${{ steps.deploy.outputs.keyVaultName }}
      keyvault-uri: ${{ steps.deploy.outputs.keyVaultUri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}

      - name: Deploy Infrastructure
        id: deploy
        run: |
          cd infra/azure/app-service/bicep

          echo "üöÄ Deploying infrastructure to DEVELOPMENT environment..."
          echo "   Deployment reason: ${{ github.event.inputs.deploy_reason || 'Automated from code changes' }}"

          # Deploy infrastructure
          DEPLOYMENT_NAME="sportiverse-infra-dev-$(date +%Y%m%d-%H%M%S)"
          echo "üì¶ Starting deployment: $DEPLOYMENT_NAME"

          # Deploy and capture results
          echo "üîÑ Creating Azure deployment..."
          az deployment sub create \
            --location ${{ env.AZURE_REGION }} \
            --name "$DEPLOYMENT_NAME" \
            --template-file main.bicep \
            --parameters environments/dev.parameters.json \
            --output table

          # Wait a moment for Azure to process
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 10

          echo "üìã Retrieving deployment outputs..."
          az deployment sub show \
            --name "$DEPLOYMENT_NAME" \
            --query "properties.outputs" \
            --output json > deployment_outputs.json

          # Extract and set outputs
          api_name=$(jq -r '.apiUrl.value' deployment_outputs.json | sed 's|https://||' | sed 's|\.azurewebsites\.net||')
          webapp_name=$(jq -r '.webAppUrl.value' deployment_outputs.json | sed 's|https://||' | sed 's|\.azurewebsites\.net||')
          resource_group=$(jq -r '.resourceGroupName.value' deployment_outputs.json)
          cosmos_connection=$(jq -r '.cosmosDbConnectionString.value // empty' deployment_outputs.json)
          keyvault_name=$(jq -r '.keyVaultName.value' deployment_outputs.json)
          keyvault_uri=$(jq -r '.keyVaultUri.value' deployment_outputs.json)

          # Store in GitHub outputs for other workflows
          echo "apiName=$api_name" >> $GITHUB_OUTPUT
          echo "webAppName=$webapp_name" >> $GITHUB_OUTPUT
          echo "resourceGroupName=$resource_group" >> $GITHUB_OUTPUT
          echo "cosmosConnectionString=$cosmos_connection" >> $GITHUB_OUTPUT
          echo "keyVaultName=$keyvault_name" >> $GITHUB_OUTPUT
          echo "keyVaultUri=$keyvault_uri" >> $GITHUB_OUTPUT

          echo "‚úÖ Development infrastructure deployed successfully!"
          echo "üîó API: $api_name | Web: $webapp_name | RG: $resource_group | KV: $keyvault_name"

      - name: Store Infrastructure State
        run: |
          # Store infrastructure outputs in GitHub environment variables
          # This allows application workflows to discover service names
          cat >> $GITHUB_ENV << EOF
          DEV_API_NAME=${{ steps.deploy.outputs.apiName }}
          DEV_WEBAPP_NAME=${{ steps.deploy.outputs.webAppName }}
          DEV_RESOURCE_GROUP=${{ steps.deploy.outputs.resourceGroupName }}
          EOF

  deploy-infrastructure-prod:
    name: üèóÔ∏è Deploy Infrastructure (Production)
    runs-on: ubuntu-latest
    needs: validate-bicep
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod') ||
      (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-prod]'))
    outputs:
      api-name: ${{ steps.deploy.outputs.apiName }}
      webapp-name: ${{ steps.deploy.outputs.webAppName }}
      resource-group: ${{ steps.deploy.outputs.resourceGroupName }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}

      - name: Deploy Infrastructure
        id: deploy
        run: |
          cd infra/azure/app-service/bicep

          echo "üöÄ Deploying infrastructure to PRODUCTION environment..."

          # Deploy infrastructure  
          DEPLOYMENT_NAME="sportiverse-infra-prod-$(date +%Y%m%d-%H%M%S)"
          echo "üì¶ Starting deployment: $DEPLOYMENT_NAME"

          # Deploy and capture results
          echo "üîÑ Creating Azure deployment..."
          az deployment sub create \
            --location ${{ env.AZURE_REGION }} \
            --name "$DEPLOYMENT_NAME" \
            --template-file main.bicep \
            --parameters environments/prod.parameters.json \
            --output table

          # Wait a moment for Azure to process
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 10

          echo "üìã Retrieving deployment outputs..."
          az deployment sub show \
            --name "$DEPLOYMENT_NAME" \
            --query "properties.outputs" \
            --output json > deployment_outputs.json

          # Extract outputs
          api_name=$(jq -r '.apiUrl.value' deployment_outputs.json | sed 's|https://||' | sed 's|\.azurewebsites\.net||')
          webapp_name=$(jq -r '.webAppUrl.value' deployment_outputs.json | sed 's|https://||' | sed 's|\.azurewebsites\.net||')
          resource_group=$(jq -r '.resourceGroupName.value' deployment_outputs.json)

          echo "apiName=$api_name" >> $GITHUB_OUTPUT
          echo "webAppName=$webapp_name" >> $GITHUB_OUTPUT
          echo "resourceGroupName=$resource_group" >> $GITHUB_OUTPUT

          echo "‚úÖ Production infrastructure deployed successfully!"

  # ============================================================================
  # AZURE KEY VAULT SECRET SEEDING
  # ============================================================================

  seed-dev-secrets:
    name: üîê Seed Development Secrets
    runs-on: ubuntu-latest
    needs: deploy-infrastructure-dev
    if: needs.deploy-infrastructure-dev.result == 'success'
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}

      - name: Discover Key Vault by tags
        id: discover
        run: |
          echo "üîç Discovering Key Vault for development environment..."

          # Discover Key Vault by tags
          KV_LINE=$(az resource list \
            --resource-type Microsoft.KeyVault/vaults \
            --query "[?tags['sportiverse-project']=='sportiverse' && tags['sportiverse-component']=='keyvault' && tags['sportiverse-environment']=='dev'].[name,resourceGroup]" \
            -o tsv | head -n1)

          if [ -z "$KV_LINE" ]; then
            echo "‚ùå Key Vault not found by tags. Infrastructure may still be deploying."
            exit 1
          fi

          KV_NAME=$(echo "$KV_LINE" | awk '{print $1}')
          RG_NAME=$(echo "$KV_LINE" | awk '{print $2}')

          echo "keyvault-name=$KV_NAME" >> $GITHUB_OUTPUT
          echo "resource-group=$RG_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Discovered Key Vault: $KV_NAME in $RG_NAME"

      - name: Discover Cosmos DB primary key
        id: cosmos
        run: |
          echo "üîç Getting Cosmos DB primary key for development..."

          # Discover Cosmos DB by tags
          COSMOS_LINE=$(az resource list \
            --resource-type Microsoft.DocumentDB/databaseAccounts \
            --query "[?tags['sportiverse-project']=='sportiverse' && tags['sportiverse-component']=='database' && tags['sportiverse-environment']=='dev'].[name,resourceGroup]" \
            -o tsv | head -n1)

          if [ -z "$COSMOS_LINE" ]; then
            echo "‚ùå Cosmos DB not found by tags"
            exit 1
          fi

          COSMOS_NAME=$(echo "$COSMOS_LINE" | awk '{print $1}')
          COSMOS_RG=$(echo "$COSMOS_LINE" | awk '{print $2}')

          # Get primary key
          COSMOS_KEY=$(az cosmosdb keys list \
            --name "$COSMOS_NAME" \
            --resource-group "$COSMOS_RG" \
            --query "primaryMasterKey" \
            -o tsv)

          echo "cosmos-key=$COSMOS_KEY" >> $GITHUB_OUTPUT
          echo "‚úÖ Retrieved Cosmos DB primary key"

      - name: Seed development secrets
        run: |
          echo "üîê Seeding development secrets to Key Vault..."

          KV_NAME="${{ steps.discover.outputs.keyvault-name }}"
          COSMOS_KEY="${{ steps.cosmos.outputs.cosmos-key }}"

          # Seed secrets from GitHub Secrets (development values)
          az keyvault secret set \
            --vault-name "$KV_NAME" \
            --name "JWT_SECRET" \
            --value "${{ secrets.DEV_JWT_SECRET }}" \
            --description "JWT secret for development environment"

          az keyvault secret set \
            --vault-name "$KV_NAME" \
            --name "PAYPAL_CLIENT_ID" \
            --value "${{ secrets.DEV_PAYPAL_CLIENT_ID }}" \
            --description "PayPal client ID for development (sandbox)"

          az keyvault secret set \
            --vault-name "$KV_NAME" \
            --name "PAYPAL_APP_SECRET" \
            --value "${{ secrets.DEV_PAYPAL_APP_SECRET }}" \
            --description "PayPal app secret for development (sandbox)"

          az keyvault secret set \
            --vault-name "$KV_NAME" \
            --name "MONGODB_PASSWORD" \
            --value "$COSMOS_KEY" \
            --description "Cosmos DB primary key for development"

          echo "‚úÖ Development secrets seeded successfully!"
          echo "üîê Secrets configured in Key Vault: $KV_NAME"

  manual-prod-secrets:
    name: üìã Production Secrets Instructions
    runs-on: ubuntu-latest
    needs: deploy-infrastructure-prod
    if: needs.deploy-infrastructure-prod.result == 'success'
    steps:
      - name: Display production secret instructions
        run: |
          echo "üîê PRODUCTION SECRETS SETUP REQUIRED"
          echo "================================================"
          echo ""
          echo "üìã Manual setup required for production secrets:"
          echo ""
          echo "1. Discover your production Key Vault:"
          echo "   az resource list --resource-type Microsoft.KeyVault/vaults \\"
          echo "     --query \"[?tags['sportiverse-project']=='sportiverse' && tags['sportiverse-component']=='keyvault' && tags['sportiverse-environment']=='prod'].[name,resourceGroup]\" \\"
          echo "     -o table"
          echo ""
          echo "2. Set production secrets (replace VAULT_NAME with actual name):"
          echo "   VAULT_NAME=\"sportiverse-kv-prod-xxxxxxx\""
          echo "   az keyvault secret set --vault-name \"\$VAULT_NAME\" --name \"JWT_SECRET\" --value \"your-production-jwt-secret\""
          echo "   az keyvault secret set --vault-name \"\$VAULT_NAME\" --name \"PAYPAL_CLIENT_ID\" --value \"your-live-paypal-client-id\""
          echo "   az keyvault secret set --vault-name \"\$VAULT_NAME\" --name \"PAYPAL_APP_SECRET\" --value \"your-live-paypal-secret\""
          echo ""
          echo "3. Set Cosmos DB password:"
          echo "   COSMOS_KEY=\$(az cosmosdb keys list --name \"cosmos-name\" --resource-group \"rg-name\" --query \"primaryMasterKey\" -o tsv)"
          echo "   az keyvault secret set --vault-name \"\$VAULT_NAME\" --name \"MONGODB_PASSWORD\" --value \"\$COSMOS_KEY\""
          echo ""
          echo "‚ö†Ô∏è  SECURITY REMINDER:"
          echo "   - Never commit production secrets to version control"
          echo "   - Use separate PayPal live credentials (not sandbox)"
          echo "   - Generate a secure JWT secret for production"
          echo "   - Consider using managed identity for Cosmos DB in the future"
          echo ""
          echo "üìñ Full documentation: docs/key-vault-secrets.md"

  # ============================================================================
  # INFRASTRUCTURE DRIFT DETECTION
  # ============================================================================

  drift-detection:
    name: üîç Infrastructure Drift Detection
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure-dev, deploy-infrastructure-prod, seed-dev-secrets]
    if: always() && (success() || failure())
    steps:
      - name: Check Infrastructure Drift
        run: |
          echo "üîç Checking for infrastructure drift..."
          echo "This job would typically:"
          echo "1. Compare deployed resources with Bicep templates"
          echo "2. Check for manual changes outside of IaC"
          echo "3. Generate drift reports"
          echo "4. Alert on significant drift"
          echo "‚úÖ Drift detection completed"

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================

  notify-infrastructure-success:
    name: üìß Infrastructure Success Notification
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure-dev, deploy-infrastructure-prod, seed-dev-secrets, manual-prod-secrets]
    if: success() && always()
    steps:
      - name: Send Success Notification
        run: |
          echo "üéâ Infrastructure deployment completed successfully!"
          echo "Timestamp: $(date)"
          echo "Environment: ${{ github.event.inputs.environment || 'auto-detected' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          echo ""
          echo "üìã Deployment Summary:"
          if [ "${{ needs.deploy-infrastructure-dev.result }}" = "success" ]; then
            echo "‚úÖ Development infrastructure deployed"
            if [ "${{ needs.seed-dev-secrets.result }}" = "success" ]; then
              echo "‚úÖ Development secrets seeded automatically"
            fi
          fi
          if [ "${{ needs.deploy-infrastructure-prod.result }}" = "success" ]; then
            echo "‚úÖ Production infrastructure deployed"
            echo "‚ö†Ô∏è  Production secrets require manual setup - see job logs"
          fi

  notify-infrastructure-failure:
    name: üö® Infrastructure Failure Notification
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure-dev, deploy-infrastructure-prod, seed-dev-secrets, manual-prod-secrets]
    if: failure() && always()
    steps:
      - name: Send Failure Notification
        run: |
          echo "‚ùå Infrastructure deployment failed!"
          echo "Timestamp: $(date)"
          echo "Environment: ${{ github.event.inputs.environment || 'auto-detected' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "üîó Check workflow logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
